// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole      @default(USER)
  accounts      Account[]
  datasets      Dataset[]
  competitions   Competition[]
  submissions   Submission[]

  @@unique([id, name, role, email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Dataset {
  userId      String
  userName    String?
  userRole    UserRole
  userEmail   String?
  id          String  @id @default(cuid())
  file        String
  title       String
  description String
  status      String @default("PENDING")

  user User? @relation(fields: [userId, userName, userRole, userEmail], references: [id, name, role, email])

  createdAt DateTime @default(now())
}

model Competition {
  userId      String
  userName    String?
  userRole    UserRole
  userEmail   String?
  id          String   @id @default(cuid())
  file        String
  testFile    String
  title       String
  description String
  prizePool   String
  metric      String
  startDate   DateTime?
  endDate     DateTime?
  status      String @default("PENDING")
  submissions Submission[]

  @@unique([id])

  user User? @relation(fields: [userId, userName, userRole, userEmail], references: [id, name, role, email])

  createdAt DateTime @default(now())
}

model Submission {
  userId      String
  userName    String?
  userRole    UserRole
  userEmail   String?
  competitionId String
  id          String   @id @default(cuid())
  file        String
  resultBefore      String
  resultAfter      String
  status      String @default("PENDING")

  user User? @relation(fields: [userId, userName, userRole, userEmail], references: [id, name, role, email])
  competition Competition? @relation(fields: [competitionId], references: [id])

  createdAt DateTime @default(now())
}